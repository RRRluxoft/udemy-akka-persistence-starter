akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
akka.persistence.journal.leveldb.dir = "target/rtjvm/journal"
//akka.persistence.journal.leveldb.dir = "/Volumes/develop/Work/journal/"

akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
akka.persistence.snapshot-store.local.dir = "target/rtjvm/snapshots"

localStores {
  akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
  akka.persistence.journal.leveldb.dir = "target/localStores/journal"
  //akka.persistence.journal.leveldb.dir = "/Volumes/develop/Work/journal/"

  akka.persistence.journal.leveldb.compaction-intervals {
    simple-persistent-actor = 1000
    "*" = 5000
  }

  akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
  akka.persistence.snapshot-store.local.dir = "target/localStores/snapshots"
}

postgresDemo {
  akka.persistence.journal.plugin = "jdbc-journal"
  akka.persistence.snapshot-store.plugin = "jdbc-snapshot-store"

  // its from journal.plugin = "jdbc-journal"
  akka-persistence-jdbc {
    shared-databases {
      slick {
        profile = "slick.jdbc.PostgresProfile$"
        db {
          numThreads = 10
          driver = "org.postgresql.Driver"
          url = "jdbc:postgresql://localhost:5432/rtjvm"
          user = "docker"
          password = "docker"
        }
      }
    }
  }
  // its from journal.plugin =
  jdbc-journal {
    use-shared-db = "slick"
  }

  // its from snapshot-store.plugin = "jdbc-snapshot-store"
  jdbc-snapshot-store {
    use-shared-db = "slick"
  }
}

cassandraDemo {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  // default values
}

customSerializerDemo {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  akka.actor {
    serializers {
      java = "akka.serialization.JavaSerializer"
      rtjvm = "part3_store_and_serialization.UserRegistrationSerializer"
    }

    serialization-bindings {
      "part3_store_and_serialization.UserRegistered" = rtjvm
      // java serializer is used by default
    }
  }
}

eventAdapters {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  cassandra-journal {
    event-adapters {
      guitar-inventory-enhancer = "part4_practices.EventAdapter$GuitarReadEventAdapter"
    }

    event-adapter-bindings {
      "part4_practices.EventAdapter$GuitarAdded" = guitar-inventory-enhancer
    }
  }
}

detachingModels {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  cassandra-journal {
    event-adapters {
      detach-adapter = "part4_practices.ModelAdapter"
    }

    event-adapter-bindings {
      "part4_practices.DomainModel$CouponApplied" = detach-adapter
      "part4_practices.DataModel$WrittenCouponApplied" = detach-adapter
      "part4_practices.DataModel$WrittenCouponAppliedV2" = detach-adapter
    }
  }
}

persistenceQuery {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  cassandra-journal {
    event-adapters {
      tagging = "part4_practices.PersistenceQueryDemo$MusicStoreEventAdapter"
    }

    event-adapter-bindings {
      "part4_practices.PersistenceQueryDemo$PlaylistPurchased" = tagging
    }
  }
}

akka {
  loglevel = DEBUG
}
mySpecialConfig {
  akka {
    logLevel = INFO
  }
}

# routers demo
routersDemo {
  akka {
    actor.deployment {
      /poolMaster2 {
        router = round-robin-pool
        nr-of-instances = 5
      }
      /groupMaster2 {
        router = round-robin-group
        routees.paths = ["/user/slave_1", "/user/slave_2", "/user/slave_3", "/user/slave_4", "/user/slave_5"]
      }
    }
  }
}


# dispatchers Demo
my-dispatcher {
  type = Dispatcher # PinnedDispatcher, CallinThreadDispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 3
  }
  throughput = 30
}
dispatchersDemo {
  akka.actor.deployment {
    /rtjmv {
      dispatcher = my-dispatcher
    }
  }
}

# Mailboxes demo

mailboxesDemo {
  support-ticket-dispatcher {
    mailbox-type = "essential_part5_infra.Mailboxes$SupportTicketPriorityMailbox"
  }
  control-mailbox {
    mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
  }
  akka.actor.deployment {
    /altControlAwareActor {
      mailbox = control-mailbox
    }
  }
}